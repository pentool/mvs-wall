// xs_begin
// arg : { name = 'Type' value = '1'  range = '1 3'  step = '1'  decimal = '0' }
// arg : { name = 'X-axis' value = '1'  range = '0 1'  step = '1'  decimal = '0' }
// arg : { name = 'Y-axis' value = '0'  range = '0 1'  step = '1'  decimal = '0' }
// arg : { name = 'Z-axis' value = '0'  range = '0 1'  step = '1'  decimal = '0' }
// arg : { name = 'Spacing' value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { name = 'Thickness' value = '1'  range = '1 255'  step = '1'  decimal = '0' }
// arg : { name = 'X Offset' value = '0'  range = '-255 255'  step = '1'  decimal = '0' }
// arg : { name = 'Y Offset' value = '0'  range = '-255 255'  step = '1'  decimal = '0' }
// arg : { name = 'Z Offset' value = '0'  range = '-255 255'  step = '1'  decimal = '0' }
// xs_end

// Construction type (wall = 1, line = 2, point = 3).
int _type = int(i_args[0]);

// Using x, y, or z axis.
bool _xAxis = bool(i_args[1]);
bool _yAxis = bool(i_args[2]);
bool _zAxis = bool(i_args[3]);

// Spacing between voxels.
float _spacing = i_args[4];

// Thickness.
float _thickness = i_args[5];

// Offsets.
float _xOffset = i_args[6];
float _yOffset = i_args[7];
float _zOffset = i_args[8];

float makeWall(vec3 v) {
	if ((_xAxis && mod(v.x + _xOffset, _thickness) > 0.0 && mod(v.x + _xOffset, _spacing + _thickness) < _thickness) ||
		(_yAxis && mod(v.y + _yOffset, _thickness) > 0.0 && mod(v.y + _yOffset, _spacing + _thickness) < _thickness) ||
		(_zAxis && mod(v.z + _zOffset, _thickness) > 0.0 && mod(v.z + _zOffset, _spacing + _thickness) < _thickness)) {
		return i_color_index;
	}
	else {
		return 0.0;
	}
}

float makeLine(vec3 v) {
	float retColor = 0.0;

	if (_xAxis) {
		if ((mod(v.x, _thickness) > 0.0 && mod(v.x, _spacing + _thickness) < _thickness) && 
			(mod(v.z, _thickness) > 0.0 && mod(v.z, _spacing + _thickness) < _thickness)) {
			retColor = i_color_index;
		}
	}

	if (_yAxis) {
		if ((mod(v.y, _thickness) > 0.0 && mod(v.y, _spacing + _thickness) < _thickness) && 
			(mod(v.z, _thickness) > 0.0 && mod(v.z, _spacing + _thickness) < _thickness)) {
			retColor = i_color_index;
		}
	}

	if (_zAxis) {
		if ((mod(v.x, _thickness) > 0.0 && mod(v.x, _spacing + _thickness) < _thickness) && 
			(mod(v.y, _thickness) > 0.0 && mod(v.y, _spacing + _thickness) < _thickness)) {
			retColor = i_color_index;
		}
	}

	return retColor;
}

float makePoint(vec3 v) {
	if ((mod(v.x, _thickness) > 0.0 && mod(v.x, _spacing + _thickness) < _thickness) &&
		(mod(v.y, _thickness) > 0.0 && mod(v.y, _spacing + _thickness) < _thickness) &&
		(mod(v.z, _thickness) > 0.0 && mod(v.z, _spacing + _thickness) < _thickness)) {
		return i_color_index;
	}
	else {
		return 0.0;
	}
}

float map(vec3 v) {
	if (_type == 1) {
		return makeWall(v);
	}
	else if (_type == 2) {
		return makeLine(v);
	}
	else if (_type == 3) {
		return makePoint(v);
	}

	return 0.0;
}
